{% comment %}
  Send email notification
{% parse_json data %}
    {
      "email": "email"
      "username": "",
      "sender": {{ context["params"]["sender_name"] | to_json }},
      "message": {{ context["params"]["message"] | to_json }}
    }
{% endparse_json %}
  graphql notify = 'modules/chat/notify', data: data
  log notify
%}
{% endcomment %}

{% liquid
  function current_profile = 'lib/current_organization_profile', user_id: context.current_user.id
  assign room_id = context.params.room_id

  function conversation = 'modules/chat/lib/queries/conversations/find_by_participant', id: room_id, participant_id: current_profile.id
  if conversation
    assign message_safe = context.params.message | raw_escape_string
    assign object = '{}' | parse_json
    hash_assign object['conversation_id'] = conversation.id
    hash_assign object['autor_id'] = current_profile.id
    hash_assign object['message'] = message_safe
    function message = 'modules/chat/lib/commands/messages/create', object: object
    if message.valid != true
      log message, 'ERROR receive message'
    else
      function res = 'modules/chat/lib/commands/conversations/mark_unread', conversation: conversation, current_profile: current_profile

      for cv in conversation.participants

          if cv.id != current_profile.id
              assign recipient_id = cv.id
              assign recipient_first_name = cv.first_name
              assign recipient_last_name = cv.last_name
              assign recipient_user_id = cv.user_id
          endif

          if cv.id == current_profile.id
              assign sender_id = cv.id
              assign sender_first_name = cv.first_name
              assign sender_last_name = cv.last_name
              assign sender_user_id = cv.user_id
          endif

      endfor

      function recipient = 'lib/queries/users/find', id: recipient_user_id
      assign recipient_email = recipient.email

      function sender = 'lib/queries/users/find', id: sender_user_id


    endif
  else
    log "Skippind. Message will be persisted on sender side", 'channel_actions/conversate skip_message'
  endif

%}

{% parse_json conversation_object %}
{
    "recipient_first_name":      {{ recipient_first_name | json }},
    "recipient_last_name":    {{ recipient_last_name | json }},
    "recipient_email":    {{ recipient_email | json }},
    "sender_first_name":     {{ sender_first_name | json }},
    "sender_last_name":     {{ sender_last_name | json }},
    "recipient_id":     {{ recipient_id | json }},
    "sender_id":     {{ sender_id | json }},
    "recipient_user_id":     {{ recipient_user_id | json }},
    "sender_user_id":     {{ sender_user_id | json }},
    "room_id":            {{ room_id }},
    "message_safe":       {{ message_safe | json }}
}
{% endparse_json %}


{% background priority: 'low', delay: 0.5, max_attempts: 3, conversation_object: conversation_object  %}

    {% liquid 
    function conversation = 'modules/chat/lib/queries/conversations/find_by_participant', id: conversation_object.room_id, participant_id: conversation_object.sender_id
    %}

    {% unless conversation.participant_read_ids contains conversation_object.recipient_id %}

        {% parse_json object %}
        {
            "to":      {{ 'sen.gairik86@gmail.com' | json }},
            "from":    {% print 'app.support_email' | t | json %},    
            "subject": {{ 'Instant Message Notification' | json }},
            "recipient_first_name":     {{ conversation_object.recipient_first_name | json }},
            "recipient_last_name":     {{ conversation_object.recipient_last_name | json }},
            "sender_first_name":     {{ conversation_object.sender_first_name | json }},
            "sender_last_name":     {{ conversation_object.sender_last_name | json }},
            "message_safe":     {{ conversation_object.message_safe | json }},
            "host": {{ context.location.host | json }}
        }
        {% endparse_json %}


        {% liquid
            function object = 'lib/commands/emails/send', template: 'orders/delivered_buyer', object: object
        %}

    {% endunless %}

{% endbackground %}
