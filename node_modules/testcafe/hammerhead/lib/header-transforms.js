var url = require("url"), urlUtil = require("./url_util"), getContentLength = require("./content-length").get, sharedConst = require("../shared/const");

function skip() {
    return void 0;
}

var requestTransforms = {
    host: function(src, ctx) {
        return ctx.originResourceInfo.host;
    },
    referer: function(src, ctx) {
        return ctx.originResourceInfo.referer || void 0;
    },
    origin: function(src, ctx) {
        return ctx.originResourceInfo.reqOrigin || src;
    },
    "content-length": function(src, ctx) {
        return getContentLength(ctx.reqBodyChunks);
    },
    cookie: skip
};

requestTransforms[sharedConst.XHR_REQUEST_MARKER_HEADER] = skip;

var requestForced = {
    cookie: function(src, ctx, server) {
        return server.cookieShelf.getCookieHeader(ctx.jobInfo, ctx.originResourceInfo.url) || void 0;
    },
    origin: function(src, ctx) {
        var force = ctx.isXhr && !src && ctx.originResourceInfo.domain !== ctx.originResourceInfo.reqOrigin;
        return force ? ctx.originResourceInfo.reqOrigin : src;
    }
};

var responseTransforms = {
    "set-cookie": function(src, ctx, server) {
        if (src) {
            var cookies = Array.isArray(src) ? src : [ src ];
            cookies = cookies.filter(function(cookieStr) {
                return !!cookieStr;
            });
            server.cookieShelf.setCookieByServer(ctx.jobInfo, ctx.originResourceInfo.url, cookies);
        }
        return void 0;
    },
    "content-security-policy": skip,
    "content-security-policy-report-only": skip,
    "x-content-security-policy": skip,
    "x-content-security-policy-report-only": skip,
    "x-webkit-csp": skip,
    "access-control-allow-origin": skip,
    "content-type": function(src, ctx) {
        return ctx.originResContentInfo.isIFrameWithImageSrc ? "text/html" : src;
    },
    "content-length": function(src, ctx) {
        return ctx.originResContentInfo.requireProcessing ? getContentLength(ctx.originResBodyChunks) : src;
    },
    location: function(src, ctx, server) {
        if (!ctx.originResContentInfo.isRedirect) return src;
        var host = url.parse(src).host;
        if (!host) src = url.resolve(ctx.originResourceInfo.url, src);
        var isCrossDomain = ctx.originResContentInfo.isIFrame && !urlUtil.sameOriginCheck(ctx.originResourceInfo.url, src);
        if (isCrossDomain) {
            return urlUtil.getCrossDomainIframeProxyUrl(src, server.hostname, server.crossDomainProxyPort, ctx.jobInfo.uid, ctx.jobInfo.ownerToken);
        }
        return server.getProxyUrl(src, ctx.jobInfo.uid, ctx.jobInfo.ownerToken, ctx.originResContentInfo.contentTypeUrlToken);
    },
    "x-frame-options": function(src, ctx, server) {
        if (src.indexOf("ALLOW-FROM") === -1) return src;
        src = src.replace("ALLOW-FROM", "").trim();
        var isCrossDomain = ctx.originResContentInfo.isIFrame && !urlUtil.sameOriginCheck(ctx.originResourceInfo.url, src);
        var proxiedUrl = isCrossDomain ? urlUtil.getCrossDomainIframeProxyUrl(src, server.hostname, server.crossDomainProxyPort, ctx.jobInfo.uid, ctx.jobInfo.ownerToken) : server.getProxyUrl(src, ctx.jobInfo.uid, ctx.jobInfo.ownerToken, ctx.originResContentInfo.contentTypeUrlToken);
        return "ALLOW-FROM " + proxiedUrl;
    },
    "referrer-policy": function() {
        return "unsafe-url";
    }
};

function transformHeaders(srcHeaders, ctx, server, transforms, forced) {
    var destHeaders = {};
    var applyTransform = function(headerName, srcHeaders, transforms) {
        var src = srcHeaders[headerName];
        var transform = transforms[headerName];
        var dest = transform ? transform(src, ctx, server) : src;
        if (dest !== void 0) destHeaders[headerName] = dest;
    };
    Object.keys(srcHeaders).forEach(function(headerName) {
        return applyTransform(headerName, srcHeaders, transforms);
    });
    if (forced) Object.keys(forced).forEach(function(headerName) {
        return applyTransform(headerName, destHeaders, forced);
    });
    return destHeaders;
}

exports.forRequest = function(ctx, server) {
    return transformHeaders(ctx.req.headers, ctx, server, requestTransforms, requestForced);
};

exports.forResponse = function(ctx, server) {
    return transformHeaders(ctx.originRes.headers, ctx, server, responseTransforms);
};