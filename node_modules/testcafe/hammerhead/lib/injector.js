var zlib = require("zlib"), brotli = require("brotli"), whacko = require("whacko"), iconv = require("iconv-lite"), sharedConst = require("./../shared/const"), pageProc = require("./../shared/page_processor"), ProcessedJsCache = require("./processed_js_cache"), ERR = require("./server_errs");

var jsCache = new ProcessedJsCache();

var ZLIB_INFLATE_INVALID_ENCODING_ERR_CODE = "Z_DATA_ERROR", BODY_CREATED_EVENT_SCRIPT = [ '<script type="text/javascript" class="' + sharedConst.TEST_CAFE_SCRIPT_CLASSNAME + '">', "if (window.Hammerhead)", "   window.Hammerhead._raiseBodyCreatedEvent();", "var script = document.currentScript || document.scripts[document.scripts.length - 1];", "script.parentNode.removeChild(script);", "</script>" ].join("\n");

function concatChunks(chunks) {
    if (chunks.length === 1) return chunks[0];
    var length = 0;
    chunks.forEach(function(chunk) {
        length += chunk.length;
    });
    var data = new Buffer(length), copyPos = 0;
    chunks.forEach(function(chunk) {
        chunk.copy(data, copyPos, 0, chunk.length);
        copyPos += chunk.length;
    });
    return data;
}

function getRawData(chunks, encoding, charset, callback) {
    var encodedData = concatChunks(chunks), decodingCallback = function(err, decodingRes) {
        if (err && !decodingRes) callback({
            code: ERR.INJECTOR_RESOURCE_DECODING_FAILED,
            encoding: encoding
        }); else {
            var rawData = null;
            charset.fromBOM(decodingRes);
            try {
                rawData = iconv.decode(decodingRes, charset.get());
            } catch (decodeErr) {
                callback({
                    code: ERR.INJECTOR_RESOURCE_CHARSET_DECODING_FAILED,
                    charset: charset.get()
                });
                return;
            }
            callback(null, rawData);
        }
    };
    switch (encoding) {
      case "gzip":
        zlib.gunzip(encodedData, decodingCallback);
        break;

      case "deflate":
        zlib.inflate(encodedData, function(err, decodingRes) {
            if (err && err.code === ZLIB_INFLATE_INVALID_ENCODING_ERR_CODE) zlib.inflateRaw(encodedData, decodingCallback); else decodingCallback(err, decodingRes);
        });
        break;

      case "br":
        decodingCallback(null, new Buffer(brotli.decompress(encodedData)));
        break;

      default:
        decodingCallback(null, encodedData);
        break;
    }
}

function getEncodedData(rawData, encoding, charset, callback) {
    var data = iconv.encode(rawData, charset.get(), {
        addBOM: charset.isFromBOM()
    });
    switch (encoding) {
      case "gzip":
        zlib.gzip(data, callback);
        break;

      case "deflate":
        zlib.deflate(data, callback);
        break;

      case "br":
        callback(null, new Buffer(brotli.compress(data)));
        break;

      default:
        callback(null, data);
        break;
    }
}

function getPageMetas($) {
    var metas = [];
    $("meta").each(function(index, meta) {
        var $meta = $(meta);
        metas.push({
            httpEquiv: $meta.attr("http-equiv"),
            content: $meta.attr("content"),
            charset: $meta.attr("charset")
        });
    });
    return metas;
}

function addCharsetInfo($, charset) {
    $($("." + sharedConst.TEST_CAFE_SCRIPT_CLASSNAME)[0]).before('<meta class="' + sharedConst.TEST_CAFE_CHARSET_CLASSNAME + '" charset="' + charset + '">');
}

function inject(chunks, encoding, charset, callback, processor, injectionOptions) {
    getRawData(chunks, encoding, charset, function(decodingErr, rawData) {
        if (decodingErr) {
            callback(decodingErr);
            return;
        }
        var processedData = null;
        try {
            processedData = processor(rawData, charset, injectionOptions);
            if (processedData === null) return;
        } catch (err) {
            callback(err);
            return;
        }
        getEncodedData(processedData, encoding, charset, function(encodingErr, encodedHtml) {
            if (encodingErr) callback({
                code: ERR.INJECTOR_RESOURCE_ENCODING_FAILED,
                encoding: encoding
            }); else callback(null, encodedHtml);
        });
    });
}

exports.injectInPage = function(chunks, encoding, charset, injectionOptions, callback) {
    var rawDataProcessor = function(rawData, charset, injectionOptions) {
        if (injectionOptions && injectionOptions.iframeImageSrc) rawData = '<html><body><img src="' + injectionOptions.iframeImageSrc + '" /></body></html>';
        var $ = null, bom = pageProc.getBOM(rawData);
        rawData = bom ? rawData.replace(bom, "") : rawData;
        try {
            $ = whacko.load(rawData);
        } catch (parseErrs) {
            throw {
                code: ERR.INJECTOR_DOCUMENT_PARSING_FAILED,
                msg: parseErrs
            };
        }
        if (injectionOptions) {
            if (charset.fromMeta(getPageMetas($))) {
                inject(chunks, encoding, charset, callback, rawDataProcessor, injectionOptions);
                return null;
            }
            var crossDomainProxyPort = injectionOptions.crossDomainProxyPort;
            $('meta[name="referrer"][content="origin"]').remove();
            var handler = function(html, callback) {
                var storedIsIframe = injectionOptions.isIFrame;
                injectionOptions.isIFrame = true;
                var result = rawDataProcessor(html, charset, injectionOptions);
                injectionOptions.isIFrame = storedIsIframe;
                callback(result);
            };
            pageProc.on(pageProc.HTML_PROCESSING_REQUIRED, handler);
            pageProc.processPage($, injectionOptions.urlReplacer, crossDomainProxyPort, injectionOptions.isIFrame);
            pageProc.off(pageProc.HTML_PROCESSING_REQUIRED, handler);
            var injection = [];
            if (injectionOptions.styleUrl) {
                injection.push('<link rel="stylesheet" type="text/css" class="');
                injection.push(sharedConst.TEST_CAFE_UI_STYLESHEET_FULL_CLASSNAME);
                injection.push('"href = "');
                injection.push(injectionOptions.styleUrl);
                injection.push('">');
            }
            if (injectionOptions.scripts) {
                injectionOptions.scripts.forEach(function(scriptUrl) {
                    injection.push('<script type="text/javascript" class="');
                    injection.push(sharedConst.TEST_CAFE_SCRIPT_CLASSNAME);
                    injection.push('" charset="UTF-8" src="');
                    injection.push(scriptUrl);
                    injection.push('">');
                    injection.push("</script>");
                });
            }
            if (injection.length) $("head").prepend(injection.join(""));
            $("body").prepend(BODY_CREATED_EVENT_SCRIPT);
            $('meta[http-equiv="X-UA-Compatible"]').remove();
            $("head").prepend('<meta http-equiv="X-UA-Compatible" content="IE=edge" />');
            addCharsetInfo($, charset.get());
        }
        return (bom || "") + $.html();
    };
    inject(chunks, encoding, charset, callback, rawDataProcessor, injectionOptions);
};

exports.injectInStylesheet = function(chunks, encoding, charset, urlReplacer, callback) {
    inject(chunks, encoding, charset, callback, function(rawData) {
        return pageProc.processStylesheet(rawData, urlReplacer);
    });
};

exports.injectInScript = function(chunks, encoding, charset, callback) {
    inject(chunks, encoding, charset, callback, function(rawData) {
        var processedJs = jsCache.pick(rawData);
        if (!processedJs) {
            processedJs = pageProc.processScript(rawData);
            jsCache.add(rawData, processedJs);
        }
        return processedJs;
    });
};

exports.injectInManifest = function(chunks, encoding, charset, urlReplacer, callback) {
    inject(chunks, encoding, charset, callback, function(rawData) {
        return pageProc.processManifest(rawData, urlReplacer);
    });
};

exports.injectInJSON = function(chunks, encoding, charset, callback) {
    inject(chunks, encoding, charset, callback, function(rawData) {
        return pageProc.processScript(rawData, true);
    });
};