'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _Object$keys = require('babel-runtime/core-js/object/keys').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _actions = require('../../actions');

var FSNode = (function (_React$Component) {
    function FSNode(props) {
        _classCallCheck(this, FSNode);

        _React$Component.call(this, props);

        this.state = {
            node: this.props.node,
            isExpanded: _ipc2.default.sendSync('getExpanded', this.props.node.id),
            isSelected: false
        };

        this.iconClass = 'tc-file-icon';
        this.expandable = true;
    }

    _inherits(FSNode, _React$Component);

    FSNode.prototype.componentDidMount = function componentDidMount() {
        this.props.register(this.state.node.id, this);
    };

    FSNode.prototype.componentWillUnmount = function componentWillUnmount() {
        this.props.register(this.state.node.id, null);

        if (this.state.isSelected) (0, _actions.selectTreeItem)(null);
    };

    FSNode.prototype.changeState = function changeState(changes, cb) {
        var newState = this.state;

        _Object$keys(changes).forEach(function (change) {
            newState[change] = changes[change];
        });

        this.setState(newState, cb);
    };

    FSNode.prototype._getNameClassName = function _getNameClassName() {
        return 'tc-user-select tc-item-name' + (this.state.isSelected ? ' selected' : '');
    };

    FSNode.prototype._getNameElement = function _getNameElement() {
        var node = this.props.node;
        var arrowIconClass = this.state.isExpanded ? 'tc-arrow-down' : 'tc-arrow-right';

        if (!this.expandable) arrowIconClass += ' hidden';

        return React.createElement(
            'div',
            { className: this._getNameClassName() },
            React.createElement('div', { className: 'selection', onClick: this._onClick.bind(this),
                onDoubleClick: this._toggleExpand.bind(this),
                onContextMenu: this._onContextMenu.bind(this) }),
            React.createElement('span', { className: arrowIconClass, onClick: this._toggleExpand.bind(this) }),
            React.createElement(
                'div',
                { onClick: this._onClick.bind(this),
                    onDoubleClick: this._toggleExpand.bind(this),
                    onContextMenu: this._onContextMenu.bind(this) },
                React.createElement('span', { className: 'tc-fs-icon ' + this.iconClass }),
                node.name
            )
        );
    };

    FSNode.prototype._onClick = function _onClick() {
        (0, _actions.selectTreeItem)(this.state.node);

        if (!this.state.node.dirs) (0, _actions.showItemView)(this.state.node);
    };

    FSNode.prototype._toggleExpand = function _toggleExpand() {
        if (this.expandable) (0, _actions.toggleTreeItemExpand)(this.state.node);
    };

    FSNode.prototype._onContextMenu = function _onContextMenu(event) {
        if (!this.state.isSelected) (0, _actions.selectTreeItem)(this.state.node);

        (0, _actions.showContextMenu)(this.state.node.id, { x: event.clientX, y: event.clientY });
    };

    return FSNode;
})(React.Component);

exports.default = FSNode;
module.exports = exports.default;