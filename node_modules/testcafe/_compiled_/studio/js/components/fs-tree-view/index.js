'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _dirItem = require('../dir-item');

var _dirItem2 = _interopRequireDefault(_dirItem);

var _fileItem = require('../file-item');

var _fileItem2 = _interopRequireDefault(_fileItem);

var _contextMenu = require('../context-menu');

var _contextMenu2 = _interopRequireDefault(_contextMenu);

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var FSTreeView = (function (_React$Component) {
    function FSTreeView(props) {
        _classCallCheck(this, FSTreeView);

        _React$Component.call(this, props);

        this.components = {};

        this.state = {
            fsTree: {
                name: '',
                dirs: [],
                files: []
            }
        };
    }

    _inherits(FSTreeView, _React$Component);

    FSTreeView.prototype.componentDidMount = function componentDidMount() {
        _ipc2.default.on('vfsStoreChange', this._onChange.bind(this));
        _ipc2.default.send('treeViewLoaded');
    };

    FSTreeView.prototype.componentWillUnmount = function componentWillUnmount() {
        _ipc2.default.removeListener('vfsStoreChange', this._onChange.bind(this));
    };

    FSTreeView.prototype.render = function render() {
        var _this = this;

        var action = function (id) {
            alert(id + ' ' + this.name);
        };
        var contextMenuItems = [{ name: 'Edit', action: action }, { name: 'Rename', action: action }, { name: 'Delete', action: action }];
        var rootNode = this.state.fsTree;

        var dirs = rootNode.dirs.map(function (dir) {
            return React.createElement(_dirItem2.default, { key: dir.id, node: dir, register: _this._registerComponent.bind(_this) });
        });
        var files = rootNode.files.map(function (file) {
            return React.createElement(_fileItem2.default, { key: file.id, node: file, register: _this._registerComponent.bind(_this) });
        });

        return React.createElement(
            'div',
            { className: 'tc-fs-tree-view' },
            React.createElement(
                'p',
                null,
                rootNode.name
            ),
            dirs,
            files,
            React.createElement(_contextMenu2.default, { items: contextMenuItems })
        );
    };

    FSTreeView.prototype._onChange = function _onChange(nodeId, changes) {
        if (changes instanceof Array) {
            var components = this.components;

            function changeNext() {
                if (changes.length) {
                    var next = changes.shift();

                    components[next.nodeId].changeState(next.changes, changeNext);
                }
            }

            changeNext();
        } else if (changes.root) {
            this.setState({
                fsTree: changes.root
            });
        } else this.components[nodeId].changeState(changes);
    };

    FSTreeView.prototype._registerComponent = function _registerComponent(id, component) {
        if (component) this.components[id] = component;else delete this.components[id];
    };

    return FSTreeView;
})(React.Component);

exports.default = FSTreeView;
module.exports = exports.default;