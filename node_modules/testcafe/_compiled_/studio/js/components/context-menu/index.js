'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _contextMenuItem = require('../context-menu-item');

var _contextMenuItem2 = _interopRequireDefault(_contextMenuItem);

var _actions = require('../../actions');

var ContextMenu = (function (_React$Component) {
    function ContextMenu() {
        _classCallCheck(this, ContextMenu);

        _React$Component.call(this);

        this.state = this.defaultState = {
            targetId: null,
            mousePosition: {
                x: null,
                y: null
            }
        };

        this.TRIGGER_EVENT_NAME = 'contextMenuChange';
    }

    _inherits(ContextMenu, _React$Component);

    ContextMenu.prototype.componentDidMount = function componentDidMount() {
        _ipc2.default.on(this.TRIGGER_EVENT_NAME, this._onShow.bind(this));
        document.body.addEventListener('click', this._closeIfOutside.bind(this));
    };

    ContextMenu.prototype.componentWillUnmount = function componentWillUnmount() {
        _ipc2.default.removeListener(this.TRIGGER_EVENT_NAME, this._onShow.bind(this));
        document.body.removeEventListener('click', this._closeIfOutside.bind(this));
    };

    ContextMenu.prototype.render = function render() {
        var _this = this;

        var menuClass = 'tc-context-menu';
        var isActive = this.state.targetId;
        var items = [];
        var style = {};

        if (isActive) {
            menuClass += ' active';
            items = this.props.items.map(function (item) {
                return _this._createMenuItem(item);
            });
            style.top = this.state.mousePosition.y + 'px';
            style.left = this.state.mousePosition.x + 'px';
        }

        return React.createElement(
            'div',
            { className: menuClass,
                style: style },
            items
        );
    };

    ContextMenu.prototype.close = function close() {
        (0, _actions.showContextMenu)();
    };

    ContextMenu.prototype._onShow = function _onShow(targetId, mousePosition) {
        this.setState({
            targetId: targetId,
            mousePosition: mousePosition
        });
    };

    ContextMenu.prototype._createMenuItem = function _createMenuItem(item) {
        return React.createElement(_contextMenuItem2.default, { key: item.name, name: item.name,
            onClick: this._performAction.bind(this, item) });
    };

    ContextMenu.prototype._performAction = function _performAction(item) {
        item.action(this.state.targetId);
        this.close();
    };

    ContextMenu.prototype._closeIfOutside = function _closeIfOutside(event) {
        if (!/tc-menu-item/.test(event.target.className)) this.close();
    };

    return ContextMenu;
})(React.Component);

exports.default = ContextMenu;
module.exports = exports.default;