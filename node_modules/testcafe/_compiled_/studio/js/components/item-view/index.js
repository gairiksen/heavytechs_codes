'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _actions = require('../../actions');

var _testView = require('../test-view');

var _testView2 = _interopRequireDefault(_testView);

var ItemView = (function (_React$Component) {
    function ItemView() {
        _classCallCheck(this, ItemView);

        _React$Component.call(this);
    }

    _inherits(ItemView, _React$Component);

    ItemView.prototype.componentDidMount = function componentDidMount() {
        (0, _actions.selectTreeItem)(this.props.node);
    };

    ItemView.prototype.componentDidUpdate = function componentDidUpdate() {
        (0, _actions.selectTreeItem)(this.props.node);
    };

    ItemView.prototype.render = function render() {
        var node = this.props.node;
        var content = null;
        var viewName = (node.tests ? 'Fixture: ' : 'Test: ') + node.name;
        var fixtureLink = node.parentId ? React.createElement(
            'p',
            { onClick: function () {
                    return (0, _actions.showItemView)({ id: node.parentId });
                } },
            'Fixture: ',
            node.parentName
        ) : null;

        if (node.tests) content = React.createElement(
            'ul',
            null,
            node.tests.map(function (test) {
                return React.createElement(
                    'li',
                    { key: test.id },
                    test.name
                );
            })
        );else if (node.parentId) content = React.createElement(_testView2.default, { test: node });

        return React.createElement(
            'div',
            { className: 'tc-item-view' },
            React.createElement(
                'span',
                null,
                viewName
            ),
            fixtureLink,
            content
        );
    };

    return ItemView;
})(React.Component);

exports.default = ItemView;
module.exports = exports.default;