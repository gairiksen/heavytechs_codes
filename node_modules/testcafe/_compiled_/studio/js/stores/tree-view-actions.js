'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu;

var _actionsAction = require('../actions/action');

var _actionsAction2 = _interopRequireDefault(_actionsAction);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function getNode(store, id) {
    var nodeRelativePath = id.substring(store.vfs.basePath.length + 1);

    return store.vfs.fsTree.getItem(nodeRelativePath);
}

function getExpandParentTreeEvents(store, node) {
    //NOTE: if node is test, then actual node is it's parent i.e. fixture
    var nodeId = node.parentId ? node.parentId : node.id;
    var vfsNode = getNode(store, nodeId);

    vfsNode = node.parentId ? vfsNode : vfsNode.parent;

    var expandEvents = [];

    if (node.group) {
        vfsNode = {
            parent: vfsNode,
            getAbsPath: function () {
                var groupTestPathParts = node.id.split(_path2.default.sep);

                groupTestPathParts[groupTestPathParts.length - 1] = node.group;

                return groupTestPathParts.join(_path2.default.sep);
            }
        };
    }

    while (vfsNode && vfsNode.parent) {
        var vfsNodeId = vfsNode.getAbsPath();

        if (!store.expanded[vfsNodeId]) {
            store.expanded[vfsNodeId] = true;
            expandEvents.unshift({
                nodeId: vfsNodeId,
                changes: { isExpanded: true }
            });
        }

        vfsNode = vfsNode.parent;
    }

    return expandEvents;
}

exports.default = (_ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu = {}, _ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu[_actionsAction2.default.toggleTreeItemExpand] = function (store, action) {
    var change = store.expanded[action.node.id] = !store.expanded[action.node.id];

    store.emitChange(action.node.id, {
        isExpanded: change
    });
}, _ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu[_actionsAction2.default.selectTreeItem] = function (store, action) {
    if (!action.node) {
        store.selected = null;
        return;
    }

    if (store.selected && store.selected.id !== action.node.id) store.emitChange(store.selected.id, { isSelected: false });

    store.selected = action.node;

    var expandEvents = getExpandParentTreeEvents(store, action.node);

    if (expandEvents.length) {
        expandEvents.push({
            nodeId: action.node.id,
            changes: { isSelected: true }
        });
        store.emitChange(null, expandEvents);
    } else store.emitChange(action.node.id, { isSelected: true });
}, _ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu[_actionsAction2.default.showContextMenu] = function (store, action) {
    store.contextMenuTarget = action.nodeId;
    store.emitChangeContextMenu(action.nodeId, action.mousePosition);
}, _ACTION$toggleTreeItemExpand$ACTION$selectTreeItem$ACTION$showContextMenu);
module.exports = exports.default;