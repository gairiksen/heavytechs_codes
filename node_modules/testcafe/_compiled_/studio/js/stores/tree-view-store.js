'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _treeViewActionsJs = require('./tree-view-actions.js');

var _treeViewActionsJs2 = _interopRequireDefault(_treeViewActionsJs);

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _libVfsConstJs = require('../../../../lib/vfs/const.js');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function createTest(test, parentNode) {
    return {
        id: test.path,
        name: test.name,
        parentId: parentNode.id,
        parentName: parentNode.name,
        stepData: test.stepData,
        group: test.group
    };
}

function createDataDrivenTest(test, parentNode) {
    var testPathParts = test.path.split(_path2.default.sep);

    testPathParts[testPathParts.length - 1] = test.group;

    return {
        id: testPathParts.join(_path2.default.sep),
        name: test.group,
        parentId: parentNode.id,
        parentName: parentNode.name,
        tests: [createTest(test, parentNode)]
    };
}

var TreeViewStore = (function () {
    function TreeViewStore(vfs, dispatcher) {
        _classCallCheck(this, TreeViewStore);

        this.vfs = vfs;
        this.mainWindow = null;
        this.expanded = {};
        this.selected = null;

        dispatcher.register(this._performAction.bind(this));

        vfs.on('suiteChanged', this._onChange.bind(this));

        _ipc2.default.on('treeViewLoaded', this._sendInitialData.bind(this));
        _ipc2.default.on('getExpanded', this._getExpanded.bind(this));
    }

    TreeViewStore.prototype.emitChange = function emitChange(nodeId, change) {
        if (this.mainWindow) this.mainWindow.send('vfsStoreChange', nodeId, change);
    };

    TreeViewStore.prototype.emitChangeContextMenu = function emitChangeContextMenu(nodeId, mousePosition) {
        if (this.mainWindow) this.mainWindow.send('contextMenuChange', nodeId, mousePosition);
    };

    TreeViewStore.prototype._sendInitialData = function _sendInitialData(event) {
        var _this = this;

        this.mainWindow = event.sender;
        this.vfs.isReady().then(function () {
            return _this.emitChange(null, { root: _this._prepareToSend(_this.vfs.fsTree) });
        });
    };

    TreeViewStore.prototype._getExpanded = function _getExpanded(event, id) {
        event.returnValue = this.expanded[id] || false;
    };

    TreeViewStore.prototype._onChange = function _onChange(changes) {
        var _this2 = this;

        if (!changes) this.emitChange(null, { root: this._prepareToSend(this.vfs.fsTree) });else {
            changes.forEach(function (change) {
                if (change.type === _libVfsConstJs.CHANGE_EVENT_TYPE.CREATE || change.type === _libVfsConstJs.CHANGE_EVENT_TYPE.REMOVE) _this2.emitChange(change.node.parent.getAbsPath(), { node: _this2._prepareToSend(change.node.parent) });else if (!change.node.parent) _this2.emitChange(null, { root: _this2._prepareToSend(change.node) });else _this2.emitChange(change.node.getAbsPath(), { node: _this2._prepareToSend(change.node) });
            });
        }
    };

    TreeViewStore.prototype._prepareToSend = function _prepareToSend(node) {
        var _this3 = this;

        var fsNode = {
            id: node.getAbsPath(),
            name: node.name
        };

        if (node.dirs) {
            fsNode.dirs = node.dirs.map(function (dir) {
                return _this3._prepareToSend(dir);
            });
            fsNode.files = node.files.map(function (file) {
                return _this3._prepareToSend(file);
            });
        } else if (node.fixture) {
            var dataDriven = {};

            fsNode.tests = [];

            node.fixture.tests.forEach(function (test) {
                if (!test.group) fsNode.tests.push(createTest(test, fsNode));else if (!dataDriven[test.group]) {
                    dataDriven[test.group] = createDataDrivenTest(test, fsNode);
                    fsNode.tests.push(dataDriven[test.group]);
                } else dataDriven[test.group].tests.push(createTest(test, fsNode));
            });
        }

        return fsNode;
    };

    TreeViewStore.prototype._performAction = function _performAction(action) {
        if (_treeViewActionsJs2.default[action.actionType]) _treeViewActionsJs2.default[action.actionType](this, action);
    };

    return TreeViewStore;
})();

exports.default = TreeViewStore;
module.exports = exports.default;