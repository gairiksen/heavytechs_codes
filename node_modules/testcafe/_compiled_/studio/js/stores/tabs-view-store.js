'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _tabsViewActionsJs = require('./tabs-view-actions.js');

var _tabsViewActionsJs2 = _interopRequireDefault(_tabsViewActionsJs);

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var TabsViewStore = (function () {
    function TabsViewStore(vfs, dispatcher) {
        _classCallCheck(this, TabsViewStore);

        this.vfs = vfs;
        this.mainWindow = null;
        this.activeView = null;
        this.views = [];

        dispatcher.register(this._performAction.bind(this));

        vfs.on('suiteChanged', this._trackRootChange.bind(this));

        _ipc2.default.on('treeViewLoaded', this._sendInitialData.bind(this));
    }

    TabsViewStore.prototype.emitTabsViewChange = function emitTabsViewChange() {
        if (this.mainWindow) {
            this.mainWindow.send('tabsViewChange', {
                tabs: this.views,
                activeId: this.activeView ? this.activeView.id : ''
            });
        }
    };

    TabsViewStore.prototype._sendInitialData = function _sendInitialData(event) {
        var _this = this;

        this.mainWindow = event.sender;
        this.vfs.isReady().then(function () {
            return _this.emitTabsViewChange();
        });
    };

    TabsViewStore.prototype._trackRootChange = function _trackRootChange(changes) {
        if (changes && changes.length === 1 && !changes[0].node.parent) {
            this.views.length = 0;
            this.activeView = null;
            this.emitTabsViewChange();
        }
    };

    TabsViewStore.prototype._performAction = function _performAction(action) {
        if (_tabsViewActionsJs2.default[action.actionType]) _tabsViewActionsJs2.default[action.actionType](this, action);
    };

    TabsViewStore.prototype._prepareToSend = function _prepareToSend(node) {
        var _this2 = this;

        if (node.id) return node;

        var fsNode = {
            id: node.path ? node.path : node.getAbsPath(),
            name: node.name
        };

        if (node.dirs) {
            fsNode.dirs = node.dirs.map(function (dir) {
                return _this2._prepareToSend(dir);
            });
            fsNode.files = node.files.map(function (file) {
                return _this2._prepareToSend(file);
            });
        } else if (node.fixture) {
            fsNode.tests = node.fixture.tests.map(function (test) {
                return {
                    id: test.path,
                    parentId: fsNode.id,
                    parentName: fsNode.name,
                    name: test.name,
                    stepData: test.stepData,
                    path: test.path,
                    group: test.group
                };
            });
        }

        return fsNode;
    };

    return TabsViewStore;
})();

exports.default = TabsViewStore;
module.exports = exports.default;