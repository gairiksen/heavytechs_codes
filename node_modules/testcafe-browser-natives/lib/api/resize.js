'use strict';

var _Number$isNaN = require('babel-runtime/core-js/number/is-nan').default;

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _viewportList = require('viewport-list');

var _viewportList2 = _interopRequireDefault(_viewportList);

var _promise = require('promise');

var _promise2 = _interopRequireDefault(_promise);

var _findWindow = require('./find-window');

var _findWindow2 = _interopRequireDefault(_findWindow);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _utilsExec = require('../utils/exec');

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

var _messages = require('../messages');

var SIZE_RE = /(\d+)x(\d+)/;

var getDevices = _promise2.default.denodeify(_viewportList2.default);

function parseSize(sizeDescription) {
    var match = SIZE_RE.exec(sizeDescription);

    if (!match) return null;

    var portraitWidth = Number(match[1]);
    var landscapeWidth = Number(match[2]);

    if (_Number$isNaN(portraitWidth) || _Number$isNaN(landscapeWidth)) return null;

    return { portraitWidth: portraitWidth, landscapeWidth: landscapeWidth };
}

function getDeviceSize(deviceName) {
    var devices, size;
    return _regeneratorRuntime.async(function getDeviceSize$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap(getDevices([deviceName]));

            case 2:
                devices = context$1$0.sent;
                size = null;

                while (devices.length && !size) size = parseSize(devices.shift().size);

                return context$1$0.abrupt('return', size);

            case 6:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function parseArgs(args) {
    var size;
    return _regeneratorRuntime.async(function parseArgs$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(typeof args[0] === 'number' && typeof args[1] === 'number')) {
                    context$1$0.next = 2;
                    break;
                }

                return context$1$0.abrupt('return', { width: args[0], height: args[1] });

            case 2:
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap(getDeviceSize(args[0]));

            case 4:
                size = context$1$0.sent;

                if (size) {
                    context$1$0.next = 7;
                    break;
                }

                throw new Error(_messages.getText(_messages.MESSAGES.deviceSizeAliasNotFound, args[0]));

            case 7:
                return context$1$0.abrupt('return', args[1] === 'portrait' ? { width: size.portraitWidth, height: size.landscapeWidth } : { width: size.landscapeWidth, height: size.portraitWidth });

            case 8:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

/**
 * Changes the browser window size to the new width and height.
 * @function
 * @async
 * @name resize
 * @param {string} pageUrl - Specifies the URL of the web page opened in the browser.
 * @param {number} width - Specifies the new window width in pixels.
 * @param {number} height - Specifies the new height in pixels.
 **/ /**
     * Changes the browser window size according to the screen size of the target device.
     * @function
     * @async
     * @name resize
     * @param {string} pageUrl - Specifies the URL of the web page opened in the browser.
     * @param {string} deviceName - Specifies the name of the target device. You can use the values specified in the Device Name column of [this table]{@link http://viewportsizes.com/}.
     * @param {string} [orientation=landscape] - Specifies the device orientation: "portrait" or "landscape".
     */

exports.default = function callee$0$0(pageUrl) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    var windowDescription, resizeArguments, _ref, width, height;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap(_findWindow2.default(pageUrl));

            case 2:
                windowDescription = context$1$0.sent;

                if (windowDescription) {
                    context$1$0.next = 5;
                    break;
                }

                return context$1$0.abrupt('return');

            case 5:
                resizeArguments = void 0;

                if (!_osFamily2.default.win) {
                    context$1$0.next = 10;
                    break;
                }

                resizeArguments = [windowDescription.hwnd];
                context$1$0.next = 15;
                break;

            case 10:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 14;
                    break;
                }

                resizeArguments = [windowDescription.windowName, windowDescription.processName];
                context$1$0.next = 15;
                break;

            case 14:
                return context$1$0.abrupt('return');

            case 15:
                context$1$0.next = 17;
                return _regeneratorRuntime.awrap(parseArgs(args));

            case 17:
                _ref = context$1$0.sent;
                width = _ref.width;
                height = _ref.height;

                resizeArguments = resizeArguments.concat([width, height]);

                context$1$0.next = 23;
                return _regeneratorRuntime.awrap(_utilsExec.execFile(_binaries2.default.resize, resizeArguments));

            case 23:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;