'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _findWindow = require('./find-window');

var _findWindow2 = _interopRequireDefault(_findWindow);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _utilsExec = require('../utils/exec');

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

var SCREENSHOT_THUMBNAIL_WIDTH = 240;
var SCREENSHOT_THUMBNAIL_HEIGHT = 130;

/**
 * Takes a screenshot of the browser window where the specified web page is opened.
 * @function
 * @async
 * @name screenshot
 * @param {string} pageUrl - Specifies the URL of the web page opened in the browser.
 * @param {string} screenshotPath - Specifies the full path to the screenshot file. For example, D:\Temp\chrome-screenshot.jpg.
 */
// NOTE: in IE, we search for a window by the page URL, while in other browsers, we do this by the window title. So,
// if you need to find a window in a non-IE browser, put the page URL to the window title before running this.

exports.default = function callee$0$0(pageUrl, screenshotPath) {
    var screenshotDirPath, fileName, thumbnailDirPath, windowDescription, windowParams;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                screenshotDirPath = _path2.default.dirname(screenshotPath);
                fileName = _path2.default.basename(screenshotPath);
                thumbnailDirPath = _path2.default.join(screenshotDirPath, 'thumbnails');
                windowDescription = void 0;

                if (!_osFamily2.default.win) {
                    context$1$0.next = 13;
                    break;
                }

                context$1$0.next = 7;
                return _regeneratorRuntime.awrap(_findWindow2.default(pageUrl));

            case 7:
                windowParams = context$1$0.sent;

                if (windowParams) {
                    context$1$0.next = 10;
                    break;
                }

                return context$1$0.abrupt('return');

            case 10:

                windowDescription = [windowParams.hwnd, windowParams.browser];
                context$1$0.next = 18;
                break;

            case 13:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 17;
                    break;
                }

                windowDescription = [pageUrl];
                context$1$0.next = 18;
                break;

            case 17:
                return context$1$0.abrupt('return');

            case 18:
                context$1$0.next = 20;
                return _regeneratorRuntime.awrap(_utilsExec.execFile(_binaries2.default.screenshot, windowDescription.concat([screenshotDirPath, fileName, thumbnailDirPath, SCREENSHOT_THUMBNAIL_WIDTH, SCREENSHOT_THUMBNAIL_HEIGHT])));

            case 20:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;