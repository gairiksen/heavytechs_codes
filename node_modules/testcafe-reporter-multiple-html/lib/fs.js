"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileExists = exports.jsonFrom = exports.getParentDirs = exports.writeJsonFileSync = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
var isDirectory = function (path) { return fs_1.statSync(path).isDirectory(); };
var isFile = function (path) { return fs_1.statSync(path).isFile(); };
exports.writeJsonFileSync = function (data) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    var json = JSON.stringify(data, null, 2);
    var filePath = path_1.join.apply(void 0, paths);
    ensureDirectoryStructureExists(filePath);
    fs_1.writeFileSync(filePath, json);
};
exports.getParentDirs = function (filePath) {
    var paths = filePath.split(path_1.sep).filter(function (dir) { return dir !== '.'; });
    var dirs = paths.splice(0, paths.length - 1);
    return dirs;
};
var ensureDirectoryStructureExists = function (filePath) {
    var dirs = exports.getParentDirs(filePath);
    var partialPath = '.';
    dirs.map(function (dir) {
        partialPath = [partialPath, dir].join(path_1.sep);
        ensureDirectoryExists(partialPath);
    });
};
var ensureDirectoryExists = function (directoryPath) {
    if (fs_1.existsSync(directoryPath)) {
        return;
    }
    fs_1.mkdirSync(directoryPath);
};
exports.jsonFrom = function (filePath) {
    if (!isFile(filePath)) {
        return {};
    }
    return JSON.parse(fs_1.readFileSync(filePath, 'utf8'));
};
exports.fileExists = function (filePath) {
    if (fs_1.existsSync(filePath) && isFile(filePath)) {
        return true;
    }
    if (fs_1.existsSync(filePath) && isDirectory(filePath)) {
        throw new Error("File '" + filePath + "' is a directory but should be a file.");
    }
    return false;
};
//# sourceMappingURL=fs.js.map