"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleHtmlReport = void 0;
var command_line_args_1 = require("./command-line-args");
var report_generator_1 = require("./report-generator");
var MultipleHtmlReport = (function () {
    function MultipleHtmlReport() {
        var _this = this;
        this._startTime = new Date();
        this._endTime = new Date();
        this._userAgents = [];
        this._testCount = 0;
        this._skippedTests = 0;
        this._testReportItems = [];
        this._currentApp = undefined;
        this.initialize = function (startTime, userAgents, testCount) {
            _this._startTime = startTime;
            _this._userAgents = userAgents;
            _this._testCount = testCount;
            _this._currentFixture = undefined;
            _this._currentApp = command_line_args_1.cliArgs.appName ? { name: command_line_args_1.cliArgs.appName } : undefined;
            if (_this._currentApp && command_line_args_1.cliArgs.appVersion) {
                _this._currentApp.version = command_line_args_1.cliArgs.appVersion;
            }
            return _this;
        };
        this.finalize = function (endTime, passed, warnings) {
            _this._endTime = endTime;
            _this._passed = passed;
            _this._warnings = warnings;
            var appName = '';
            var appVersion = '';
            if (_this._currentApp) {
                appName = _this._currentApp.name;
                if (_this._currentApp.version) {
                    appVersion = _this._currentApp.version;
                }
            }
            var htmlReportResult = {
                info: {
                    appName: appName,
                    appVersion: appVersion,
                    browserCount: _this._userAgents.length,
                    endTime: _this._endTime,
                    passed: _this._passed,
                    skipped: _this._skippedTests,
                    failed: _this._testCount - _this._passed,
                    startTime: _this._startTime,
                    testCount: _this._testCount,
                    userAgents: _this._userAgents,
                    warnings: _this._warnings,
                },
                items: _this._testReportItems,
            };
            report_generator_1.generateReport(htmlReportResult);
            return _this;
        };
        this.createFixture = function (name, path) {
            _this.currentFixture = {
                name: name,
                path: path,
            };
            return _this;
        };
        this.createTest = function (name, testRunInfo, testErrors) {
            testRunInfo.browsers.forEach(function (browserResult) {
                var _a;
                var testResult = 'unknown';
                var error = '';
                if (testRunInfo.skipped) {
                    _this._skippedTests++;
                    return;
                }
                var browserErrors = testErrors === null || testErrors === void 0 ? void 0 : testErrors.filter(function (err) { return err.testRunId === browserResult.testRunId; });
                if (browserErrors && browserErrors.length > 0) {
                    testResult = 'failed';
                    error = browserErrors[0].formattedError;
                }
                else {
                    testResult = 'passed';
                }
                var screenshots = testRunInfo.screenshots
                    .filter(function (s) { return s.testRunId === browserResult.testRunId; })
                    .map(function (s) { return s.screenshotPath.replace(process.cwd(), ''); });
                var userAgent = browserResult.prettyUserAgent.split('/');
                var browser;
                var platform = 'unknown';
                var device = '';
                if (userAgent.length === 2) {
                    browser = userAgent[0].trim();
                    platform = userAgent[1].trim();
                }
                else {
                    browser = browserResult.alias;
                }
                if (browserResult.alias && browserResult.alias.startsWith('browserstack')) {
                    var aliasParts = browserResult.alias.split(':');
                    var browserstackDevicePart = aliasParts.pop();
                    if (browserstackDevicePart) {
                        device = browserstackDevicePart;
                    }
                }
                else {
                    if (browserResult.headless) {
                        device = 'headless';
                    }
                }
                var newReportRow = {
                    testRunId: browserResult.testRunId,
                    fixtureName: (_a = _this.currentFixture) === null || _a === void 0 ? void 0 : _a.name,
                    testName: name,
                    status: testResult,
                    browser: browser,
                    error: error,
                    screenshotPaths: screenshots,
                    platform: platform,
                    device: device,
                };
                _this._testReportItems.push(newReportRow);
            });
            return _this;
        };
    }
    Object.defineProperty(MultipleHtmlReport.prototype, "currentFixture", {
        get: function () {
            return this._currentFixture;
        },
        set: function (fixture) {
            if (fixture === undefined) {
                return;
            }
            this._currentFixture = fixture;
        },
        enumerable: false,
        configurable: true
    });
    return MultipleHtmlReport;
}());
exports.MultipleHtmlReport = MultipleHtmlReport;
//# sourceMappingURL=multiple-html.js.map