"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReport = void 0;
var options_1 = require("./options");
var handlebars = __importStar(require("handlebars"));
var fs_1 = require("fs");
var path_1 = require("path");
exports.generateReport = function (report) {
    var template = fs_1.readFileSync(__dirname + '/handlebars.template.html', 'utf8');
    var compiledTemplate = handlebars.compile(template, {});
    var html = compiledTemplate(report);
    var reportFolder = '';
    if (options_1.options.args) {
        if (options_1.options.args.reportFolder) {
            reportFolder = options_1.options.args.reportFolder;
        }
    }
    if (!fs_1.existsSync(path_1.resolve(reportFolder))) {
        fs_1.mkdirSync(reportFolder, { recursive: true });
    }
    fs_1.writeFileSync(reportFolder + '/multiple-html-' + new Date().valueOf() + '.html', html, 'utf8');
};
//# sourceMappingURL=report-generator.js.map