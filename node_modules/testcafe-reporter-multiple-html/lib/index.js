"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var multiple_html_1 = require("./multiple-html");
var stack_frames_parser_1 = require("./stack-frames-parser");
var ansi_to_html_1 = __importDefault(require("ansi-to-html"));
exports['default'] = function () {
    var convert = new ansi_to_html_1.default({
        newline: true,
    });
    var report = new multiple_html_1.MultipleHtmlReport();
    return {
        reportTaskStart: function (startTime, userAgents, testCount) {
            report = report.initialize(startTime, userAgents, testCount);
        },
        reportFixtureStart: function (name, path) {
            report = report.createFixture(name, path);
        },
        reportTestDone: function (name, testRunInfo) {
            var testErrors = this.formatErrors(testRunInfo.errs);
            report = report.createTest(name, testRunInfo, testErrors);
        },
        reportTaskDone: function (endTime, passed, warnings) {
            report = report.finalize(endTime, passed, warnings);
        },
        formatErrors: function (errs) {
            var _this = this;
            var result = [];
            if (!Array.isArray(errs)) {
                return;
            }
            var originalStackTraceLimit = Error.stackTraceLimit;
            Error.stackTraceLimit = 1000;
            errs.map(function (err) {
                if (!err.callsite || (err && typeof err.callsite === 'string')) {
                    return;
                }
                stack_frames_parser_1.filterStackFramesIn(err.callsite);
                var originalStackFrames = __spreadArrays(err.callsite.stackFrames);
                var files = stack_frames_parser_1.getAllFilesIn(err.callsite);
                files.map(function (filename, index) {
                    err.callsite.stackFrames = stack_frames_parser_1.stackFramesOf(filename).in(originalStackFrames);
                    err.callsite.filename = filename;
                    err.callsite.lineNum = err.callsite.stackFrames[0].getLineNumber() - 1;
                    var stackTrace = _this.formatError(err);
                    if (index === 0) {
                        var newError = {
                            testRunId: err.testRunId,
                            formattedError: encodeURI(convert.toHtml(stackTrace)),
                        };
                        result.push(newError);
                        return;
                    }
                });
            });
            Error.stackTraceLimit = originalStackTraceLimit;
            return result;
        },
    };
};
module.exports = exports['default'];
//# sourceMappingURL=index.js.map